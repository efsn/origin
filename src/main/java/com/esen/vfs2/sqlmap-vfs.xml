<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Vfs">

	<!-- vfs文件需要缓存的都缓存到此cacheModel -->
	<cache flushInterval="86400000" type="com.esen.jdbc.ibatis.LoggingEhcache" readOnly="false">
	</cache>
	
	<!-- 不带文件内容的结果 -->
	<resultMap id="vfs-result" type="VfsNode">
		<result property="parentDir" column="PARENTDIR_"/>
		<result property="fileName" column="FILENAME_"/>
		<result property="isFile" column="ISFILE_"/>
		<result property="createTime" column="CREATETIME_"/>
		<result property="lastModifyTime" column="MODIFYTIME_"/>
		<result property="owner" column="OWNER_"/>
		<result property="mender" column="MENDER_"/>
		<result property="charset" column="CHARSET_"/>
		<result property="mimeType" column="MIMETYPE_"/>
		<result property="size" column="SIZE_"/>
	</resultMap>
	
	<!-- 带文件内容的结果 -->
	<resultMap id="vfs-result-withcontent" type="VfsNode" extends="vfs-result">
		<result property="content" column="CONTENT_"/>
	</resultMap>
	
	<!-- sql -->
	<sql id="except-root"><!-- 去除根目录 -->
		<if test="fileName == &quot;/&quot;">
			and	FILENAME_ &lt;&gt; '/'
		</if>
	</sql>
	
	<sql id="self"><!-- 查询节点本身 -->
		(PARENTDIR_=#{parentDir} and FILENAME_=#{fileName})
	</sql>
	
	<sql id="self-except-root"><!-- 查询节点本身,根目录不在结果中 -->
		(PARENTDIR_=#{parentDir} and FILENAME_=#{fileName} <include refid="except-root"/> )
	</sql>
	
	<sql id="childs"><!-- 查询子节点 -->
		<choose>
			<when test="fileName == &quot;/&quot;">
				PARENTDIR_= #{parentDir}
				<include refid="except-root"/>
			</when>
			<otherwise>
				PARENTDIR_='${parentDir}${fileName}/'
			</otherwise>
		</choose>
	</sql>
	
	<sql id="childs-recur"><!-- 递归查询子节点 -->
		(
		<choose>
			<when test="fileName == &quot;/&quot;">
				PARENTDIR_ like '${parentDir}%'
				<include refid="except-root"/>
			</when>
			<otherwise>
				PARENTDIR_ like '${parentDir}${fileName}/%'
			</otherwise>
		</choose>
		)
	</sql>
	
	<sql id="replaceParent">		
		<fordb type="db2,dm dbms">
			<esql>	
				STRCAT(STRCAT('#{newParentDir}','#{newFileName}'),
				mid(PARENTDIR_,len('#{parentDir}')+len('#{fileName}'),
				len(PARENTDIR_)-len('#{parentDir}')-len('#{fileName}')))
			</esql>
		</fordb>		
		<fordb type="-db2,dm dbms">
			<esql>		
				STRCAT(STRCAT("cast('#{newParentDir}','C',1024)","cast('#{newFileName}','C',255)"),
				mid(PARENTDIR_,len("cast('#{parentDir}','C',1024)")+len("cast('#{fileName}','C',255)"),
				len(PARENTDIR_)-len("cast('#{parentDir}','C',1024)")-len("cast('#{fileName}','C',255)")))
			</esql>
		</fordb>			
	</sql>
	
	<sql id="vfs-search">
		select * from ${VFSTABLENAME} <where> ${value} </where>
	</sql>

	<!-- insert -->
	<insert id="vfs-insert" parameterType="VfsNode" flushCache="true"><!-- 写入数据到数据库中 -->
		insert into ${VFSTABLENAME}(PARENTDIR_,FILENAME_,ISFILE_,CREATETIME_,MODIFYTIME_,OWNER_,MENDER_,CHARSET_,MIMETYPE_,SIZE_,CONTENT_)
		values(#{parentDir}, #{fileName}, #{isFile}, #{createTime}, #{lastModifyTime}, #{owner}, #{mender}, #{charset}, #{mimeType}, #{size}, #{content})
	</insert>
	
	<!-- select -->
	<!-- 根据parentDir和fileName获得文件信息 -->
	<select id="vfs-selectByPath" parameterType="VfsNode" resultMap="vfs-result">
		select * from ${VFSTABLENAME} where <include refid="self"/>
	</select>
	
	<!-- 根据parentDir和fileName获得文件信息,包括文件的内容 -->
	<select id="vfs-selectByPath-withContent" parameterType="VfsNode" resultMap="vfs-result-withcontent">
		select * from ${VFSTABLENAME} where <include refid="self"/>
	</select>
	
	<!--  根据  parentDir 和 fileName 查询节点个数，判断该节点是否存在 -->
	<select id="vfs-count" parameterType="VfsNode" resultType="int">
		select count(*) from ${VFSTABLENAME} where <include refid="self"/>
	</select>
	
	<!-- 获得文件下的所有子节点 -->
	<select id="vfs-selectChilds" parameterType="VfsNode" resultMap="vfs-result">
		select * from ${VFSTABLENAME} where <include refid="childs"/>
	</select>
	
	<!-- 根据传入的查询条件,获得相应的文件 -->
	<select id="vfs-search" parameterType="string" resultMap="vfs-result">
		<include refid="vfs-search"/>
	</select>
	
	<select id="vfs-search-withcontent" parameterType="string" resultMap="vfs-result-withcontent">
		<include refid="vfs-search"/>
	</select>
	
	<!-- 查询文件本身和递归查询子节点,包含文件内容,在导出文件时调用 -->
	<select id="vfs-selectSelfAndChildsRecurByPath" parameterType="VfsNode" resultMap="vfs-result-withcontent">
		select * from ${VFSTABLENAME} 
		where <include refid="self-except-root"/>  or <include refid="childs-recur"/>
	</select>

	<!-- update -->
	<!-- 更新文件的信息 -->
	<update id="vfs-updateContent" parameterType="VfsNode" flushCache="true">
		update ${VFSTABLENAME} set MODIFYTIME_=#{lastModifyTime}, MENDER_=#{mender}, SIZE_=#{size}, CONTENT_=#{content}
		where <include refid="self"/>
	</update>
	
	<!-- 更新文件的属性,包括owner,最后修改时间,修改者,编码,MimeType  -->
	<update id="vfs-updateProperties" parameterType="VfsNode" flushCache="true">
		update ${VFSTABLENAME} set OWNER_=#{owner}, MODIFYTIME_=#{lastModifyTime}, MENDER_=#{mender}, CHARSET_=#{charset}, MIMETYPE_=#{mimeType}
		where <include refid="self"/>
	</update>
	
	<!-- 重命名文件 -->
	<update id="vfs-renameFile" parameterType="VfsNodeExtend" flushCache="true">
		update ${VFSTABLENAME} set PARENTDIR_=#{newParentDir}, FILENAME_=#{newFileName} 
		where <include refid="self-except-root"/>
	</update>
	
	<!-- 重命名文件的所有子节点 -->
	<update id="vfs-renameChilds" parameterType="VfsNodeExtend" flushCache="true">
		update ${VFSTABLENAME} set PARENTDIR_= <include refid="replaceParent"/>
		where <include refid="childs-recur"/>
	</update>
	
	<!-- 复制文件 -->
	<update id="vfs-copyFile" parameterType="VfsNodeExtend" flushCache="true">
		insert into ${VFSTABLENAME}(PARENTDIR_,FILENAME_,ISFILE_,CREATETIME_,MODIFYTIME_,OWNER_,MENDER_,CHARSET_,MIMETYPE_,SIZE_,CONTENT_)
		select
		<fordb type="db2,dm dbms">
			cast('#{newParentDir}','C',1024),cast('#{newFileName}','C',255)
		</fordb>
		<fordb type="-db2,dm dbms">
			#{newParentDir},#{newFileName}
		</fordb>
			,ISFILE_,CREATETIME_,MODIFYTIME_,OWNER_,MENDER_,CHARSET_,MIMETYPE_,SIZE_,CONTENT_
		from ${VFSTABLENAME} where
		<include refid="self-except-root"/>
	</update>
	<!-- 复制文件的所有子节点 -->
	<update id="vfs-copyChilds" parameterType="VfsNodeExtend" flushCache="true">
		insert into ${VFSTABLENAME}( PARENTDIR_,FILENAME_,ISFILE_,CREATETIME_,MODIFYTIME_,OWNER_,MENDER_,CHARSET_,MIMETYPE_,SIZE_,CONTENT_)
		select <include refid="replaceParent"/>
			,FILENAME_,ISFILE_,CREATETIME_,MODIFYTIME_,OWNER_,MENDER_,CHARSET_,MIMETYPE_,SIZE_,CONTENT_
		from ${VFSTABLENAME}
		where <include refid="childs-recur"/>
	</update>

	<!-- delete -->

	<!-- 删除文件和文件的所有子节点 -->
	<delete id="vfs-deleteByPath" parameterType="map" flushCache="true">
		delete from ${VFSTABLENAME} where
		<choose>
			<when test="node != null and node.fileName == &quot;/&quot;">				
				PARENTDIR_ like #{path} and FILENAME_ &lt;&gt; '/'
			</when>
			<otherwise>
				(PARENTDIR_=#{node.parentDir} and FILENAME_=#{node.fileName}) 
				or (PARENTDIR_ like #{path})
			</otherwise>
		</choose>
	</delete>
	
	<!-- 删除文件,在导入文件时,删除文件本身,会重新写入文件的信息 -->
	<delete id="vfs-deleteByPathSelf" parameterType="VfsNode" flushCache="true">
		delete from ${VFSTABLENAME}
		where <include refid="self-except-root"/>
	</delete>

	<!-- end -->
</mapper>